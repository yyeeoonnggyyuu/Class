
브랜치

나무줄기 같이 여러 흐름으로 나누어 관리하는방법
버전을 여러흐름으로 나누어 관리한다 

기존코드에 새로운거를 넣을 때 쉽게 되지않는다


1.A와B가 작업한 내용중에는 서로의 작업과 전혀 관련없는 부분도 있을 것이고 때로는 같은 코드를 다르게 수정한 부분도 있을것
2.이를 일일이 대조하고 합칠 코들르 판단한다면 너무나 번거로움
3. 하나로 합칠경우 너무 번거로움

1.C회사는 자체 제작한 프로그램을 여러 회사에 납품했음
2. C회사는 프로그램을 사용하느 ㄴ회사들은 C회사에 각자의 요구사항을 전달
3. 어떤 회사는 프로그램이 자신들의 회사에 맞게 조금 변경했으면 좋겠다고 요구했고 어떤회산느 프로그램에 추가 기능이 있었으면 좋겠다고 요구했고 어떤회사는 ㅊ회사에게 이기능은 필요하지 않으니 빼달라고 요구사항을
4. 가회사의 요구사항의 수만큼 프로그램 코드를 복사하고, 요구사항에 맞게 복사된 코드를 수정

위의 두 사례는 브랜치로 해결가능

작업을 '분기'하고 싶을 때 브랜치를 나누면 됨
1. 브랜치를  나눔
2. 각자의 브랜치에서 작업
3. (필요한경우)나눈 브랜치를 합침



깃이 제공하느 가장 기본적인  최초의 브랜치를 master브랜치라고함
지금까지 여러분이 만든 커밋은 모두 master 브랜치


마스터의 최신 커밋에서 foo라는 브랜치를 만들고 

head - 기본적으로 현재 작업중인 브랜치의 최신 커밋을 가리키는 일종의 표시

체크아웃- 특정브랜치에서 작업할 수 있도록 작업환경을 바꾸는것을 의미

1.새로운 기능을 개발하기위한 브랜치 Feature/<새기능>
2.릴리스를 준비하기 위한 브랜치 release/<릴리스번호>
3.hotflx/login 브랜치


* 브랜치 병합  머지(merge)

빨리감기 병합 
1.foo브랜치를 master브랜치로 병합
2. 빨리감기 병합 : 마스터 브랜치에 별다른 변화가 없을경우 foo브랜치가 바로 병합됨
3. 먼저 마스터(살아있을 녀석)를 더블한 후 왼쪽화면 브랜치에서 foo브랜치 마우스오른쪽클릭  현재브랜치로 foo브랜치 병합 클릭
4. 브랜치 병합후 남은 브래친가필요없으면 삭제하는게 좋음(여기선 foo브랜치삭제) : 브랜치 항목에서 foo 브랜치 우클릭후 삭제 


일반병합 

충돌해결하기
    병합하는 과정이 순단치 않음
    충돌이란 병합하려는 두 블랜치가서로 같은 내용을 다르게 수정한 상황을 의미
    충돌이 발생하면 브랜치가 한번에 병합되지 않음
    여렷이 협업하여 개발할 때 빈번히 발생
    같은이름의 파일안에 내용이 다를경우도충돌 발생

        이름이 같은데 내용이 다르다고 알려주고 화면 아래에 나옴
        

    병합과정에서 충돌할 경우 충돌 해결 후 다시 커밋해야함
    두 브랜치중 어떤 내용을 병합할지는 내가 선택
예시
    <<<<<<<<<head
    master  (현재 체크아웃 내용)
    ============
    foo     (병합할 파일 내용)
    >>>>>>> foo

    여기서 스테이지에 올라간파일 혹은 올라가지 않은 파일 우클릭 후 
    돌해결 누른후 
    내것 또는 저장소(로컬저장소) 선택 

브랜치재배치
리베이스 - 내가 재배치하고 싶은(foo) 를 체크아웃 후 이동하고 싶은 커밋 (master의4)로 우클릭후 재배치

재배치 충돌내서 확인하기!!!!!!1


깃허브!!!!!--원격 저장소 호스팅 서비스

간단한 설정 -- 


클론 : 원격저장소를 복제하기
        예시- https://github.com/namhyung/uftrace >접속 > code > SSH  > URL 복사
푸시 : 원격저장소에 밀어넣기
패치 : 원격저장소를 일단가져만오기
풀 : 원격저장소를 가져와서 합치기


소스트리 깃허브 연동하기

    소스트리와 깃허브가 SSH통신할수있도록연동
    SSH 는 안전하게 정보를 주고받을 수 있는 통신방법



혼자관리할땐 master

깃허브 연결하면 
main , origin/main  ,  origin/HEAD 이렇게 3개가나옴
         (이유는 원격으로 연결해서 왼쪽 원격에 origin  과 origin/head가 추가됨)

main(github용) : master(개인용)브랜치와 같음
origin/main : 원격 저장소 origin의 main 
origin/HEAD : 원격 저장소 origin의 head 
디폴트값 -> origin -> 내 주소라고 보면됨(이름변경 가능)
로컬로 클론한 저장소의 기본 브랜치 이름도 깃허브이 기본 브랜치 이름과 동일란 메인이 되는것


푸시 : 로컬에서 커밋 추가한 뒤 이를 원격저장소에 푸시해보자
        -->로컬저장소에 저장후 커밋하면 main에 저장됨 

    커밋 메시지 - deleta a.txt and add b.txt 이런식으로 해야함


패치 :  fetch 가져오다      
        일단 가져오기만함 
        다른 개발자가 푸시한 내용을 가져오고 싶을 때 패치


    이경우는 main이 아닌 origin/main과 head가  올라가있음
            이럴 때 내 메인이 origin으로 붙기 때문에 origin 우클릭후 병합


풀  pull : 다른 개발자가 푸시한 파일을 가져와서 바로 합치기 (안전을 보장할 수 있을 때만!!)




마지막 풀리퀘스트 : 깃허브 협업
full request :변경사항을 요청하는 것 
        한 원격저장소를 두고 개발하는 것
        collaborator로 추가하여 푸시권한주기
        소유자가 collaborator로 추가한 경우에는 여러분이 소유하지 않은 계정의 원격 저장소에 푸시할 수 있음
        셋팅 - collaborator - 비번 입력후 - add people 로 이메일 입력후 저장 하면 승인하면 됨

1. 포크하기 : 포크란 원격저장소를 내 계정에 복제하기
        내 저장소에 소스트리를 이용해 클론을 만들고 저장 후 브랜치를 만들어주고

클론하고자 하는 깃허브 fork 누른 후 내 계정에 클론한 후 코드를 복사해서 소스트리에 클론해야 가능
